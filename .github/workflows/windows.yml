name: Windows
on:
  push:
    branches: [dev]
    paths-ignore:
      - 'README.md'
  create:
    branches: [dev]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    env:
      targetName: DBLParse.exe
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache 
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.5.3
        with:
          version: 5.12.7
          target: desktop
          arch: win64_msvc2017_64
          modules: qtwebengine
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Pull codes
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Build MSVC
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          qmake
          nmake
      - name: Package
        # if: startsWith(github.ref, 'refs/tags/')
        env:
          VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
        shell: pwsh
        run: |
          New-Item -ItemType Directory DBLParse
          Copy-Item release\DBLParse.exe DBLParse\
          cd DBLParse
          windeployqt DBLParse.exe
          cd ..
          Copy-Item .\degeneracy_cliques.exe .\DBLParse\
          python .\generate_nCr.py
          Copy-Item .\nCr.txt .\DBLParse\
          Compress-Archive -Path .\DBLParse\ DBLParse.zip
      - name: Upload package
        uses: actions/upload-artifact@v1
        with: 
          name: DBLParse.zip
          path: DBLParse.zip
      - name: Query Release Win
        id: queryReleaseWin
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.repository }}
          ref: ${{ github.ref }}
        run: |
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response={}
          try {
            $response = Invoke-RestMethod -Uri $url -Method Get
          } catch {
            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ 
            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
            echo "::set-output name=needCreateRelease::true"  
            return
          }
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          if ($latestUpUrl.Length -eq 0) {
            echo "::set-output name=needCreateRelease::true"  
          }
      - name: Create Release Win
        id: createReleaseWin
        if: startsWith(github.ref, 'refs/tags/') && steps.queryReleaseWin.outputs.needCreateRelease == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.event.ref }}
          release_name: Release ${{ github.event.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: Get Latest Tag Release
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          upUrl: ${{ steps.createReleaseWin.outputs.upload_url }}
          ref: ${{ github.ref }}
        run: |
          if (${env:upUrl}.Length -gt 0) {
              $v=${env:upUrl}
              echo "::set-env name=uploadUrl::$v"
              return
          } 
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response = Invoke-RestMethod -Uri $url -Method Get
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          echo "::set-env name=uploadUrl::$latestUpUrl"
          Write-Host 'env uploadUrl:'${env:uploadUrl}
      - name: Upload Release
        id: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ env.uploadUrl }}
          asset_path: ./${{ env.packageName }}.zip
          asset_name: ${{ env.packageName }}.zip
          asset_content_type: application/zip